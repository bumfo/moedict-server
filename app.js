// Generated by CoffeeScript 1.3.3
(function() {
  var Definition, Dict, Entry, Heteronym, Sequelize, app, express, sql, _;

  _ = require('underscore');

  express = require('express');

  Sequelize = require('sequelize');

  sql = new Sequelize('database', 'username', 'password', {
    dialect: 'sqlite',
    storage: './db.sqlite3',
    logging: false,
    define: {
      underscored: true,
      timestamps: false
    }
  });

  Definition = sql.define('definitions', {
    id: Sequelize.INTEGER,
    heteronym_id: Sequelize.INTEGER,
    type: Sequelize.STRING,
    def: Sequelize.STRING,
    example: Sequelize.STRING,
    synonyms: Sequelize.STRING,
    antonyms: Sequelize.STRING,
    link_type: Sequelize.STRING,
    link_id: Sequelize.INTEGER,
    source: Sequelize.STRING
  });

  Dict = sql.define('dicts', {
    id: Sequelize.INTEGER,
    name: Sequelize.STRING,
    type: Sequelize.INTEGER
  });

  Entry = sql.define('entries', {
    id: Sequelize.INTEGER,
    title: Sequelize.STRING,
    radical: Sequelize.STRING,
    stroke_count: Sequelize.INTEGER,
    non_radical_stroke_count: Sequelize.INTEGER,
    dict_id: Sequelize.INTEGER
  });

  Heteronym = sql.define('heteronyms', {
    id: Sequelize.INTEGER,
    entry_id: Sequelize.INTEGER,
    bopomofo: Sequelize.STRING,
    bopomofo2: Sequelize.STRING,
    pinyin: Sequelize.STRING
  });

  Dict.hasMany(Entry, {
    foreignKey: 'dict_id'
  });

  Entry.hasMany(Heteronym, {
    foreignKey: 'entry_id'
  });

  Heteronym.hasMany(Definition, {
    foreignKey: 'heteronym_id'
  });

  app = express();

  app.get('/', function(req, res) {
    return res.send('GET: /s/萌');
  });

  app.get('/s/:q', function(req, res) {
    var q, _entries;
    if (req.params['q']) {
      q = req.params['q'];
      _entries = [];
      return Entry.findAll({
        where: "title like '" + q + "%'"
      }).done(function(err, entries) {
        if (entries.length > 0) {
          return _.each(entries, function(entry, e_num) {
            delete entry.selectedValues['created_at'];
            delete entry.selectedValues['updated_at'];
            _entries[e_num] = entry.selectedValues;
            return entry.getHeteronyms().success(function(heteronyms) {
              var _heteronyms;
              _heteronyms = [];
              if (heteronyms.length > 0) {
                return _.each(heteronyms, function(heteronym, h_num) {
                  delete heteronym.selectedValues['created_at'];
                  delete heteronym.selectedValues['updated_at'];
                  _heteronyms[h_num] = heteronym.selectedValues;
                  _entries[e_num]['heteronyms'] = _heteronyms;
                  return heteronym.getDefinitions().success(function(definitions) {
                    var _definitions;
                    _definitions = [];
                    if (definitions.length > 0) {
                      _.each(definitions, function(definition, d_num) {
                        delete definition.selectedValues['created_at'];
                        delete definition.selectedValues['updated_at'];
                        _definitions[d_num] = definition.selectedValues;
                        return _entries[e_num]['heteronyms'][h_num]['definitions'] = _definitions;
                      });
                    }
                    return res.send(JSON.stringify(_entries));
                  });
                });
              } else {
                return res.send(JSON.stringify(_entries));
              }
            });
          });
        } else {
          return res.send(JSON.stringify(_entries));
        }
      });
    }
  });

  app.listen('3000');

}).call(this);
